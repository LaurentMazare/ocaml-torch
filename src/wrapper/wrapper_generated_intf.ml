(* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT BY HAND! *)

module type S = sig
  type _ t
  type _ scalar

  val abs :
    _ t ->
    _ t

  val abs_ :
    _ t ->
    _ t

  val abs_out :
    out:_ t ->
    _ t ->
    _ t

  val acos :
    _ t ->
    _ t

  val acos_ :
    _ t ->
    _ t

  val acos_out :
    out:_ t ->
    _ t ->
    _ t

  val adaptive_avg_pool1d :
    _ t ->
    output_size:int list ->
    _ t

  val adaptive_avg_pool2d :
    _ t ->
    output_size:int list ->
    _ t

  val adaptive_avg_pool2d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    _ t

  val adaptive_avg_pool3d :
    _ t ->
    output_size:int list ->
    _ t

  val adaptive_avg_pool3d_backward :
    grad_output:_ t ->
    _ t ->
    _ t

  val adaptive_avg_pool3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    _ t

  val adaptive_avg_pool3d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    _ t

  val adaptive_max_pool1d :
    _ t ->
    output_size:int list ->
    _ t * _ t

  val adaptive_max_pool2d :
    _ t ->
    output_size:int list ->
    _ t * _ t

  val adaptive_max_pool2d_backward :
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    _ t

  val adaptive_max_pool2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    _ t

  val adaptive_max_pool2d_out :
    out:_ t ->
    indices:_ t ->
    _ t ->
    output_size:int list ->
    _ t * _ t

  val adaptive_max_pool3d :
    _ t ->
    output_size:int list ->
    _ t * _ t

  val adaptive_max_pool3d_backward :
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    _ t

  val adaptive_max_pool3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    _ t

  val adaptive_max_pool3d_out :
    out:_ t ->
    indices:_ t ->
    _ t ->
    output_size:int list ->
    _ t * _ t

  val add :
    _ t ->
    _ t ->
    _ t

  val add1 :
    _ t ->
    'a scalar ->
    _ t

  val add_ :
    _ t ->
    _ t ->
    _ t

  val add_1 :
    _ t ->
    'a scalar ->
    _ t

  val add_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val addbmm :
    _ t ->
    batch1:_ t ->
    batch2:_ t ->
    _ t

  val addbmm_ :
    _ t ->
    batch1:_ t ->
    batch2:_ t ->
    _ t

  val addbmm_out :
    out:_ t ->
    _ t ->
    batch1:_ t ->
    batch2:_ t ->
    _ t

  val addcdiv :
    _ t ->
    tensor1:_ t ->
    tensor2:_ t ->
    _ t

  val addcdiv_ :
    _ t ->
    tensor1:_ t ->
    tensor2:_ t ->
    _ t

  val addcdiv_out :
    out:_ t ->
    _ t ->
    tensor1:_ t ->
    tensor2:_ t ->
    _ t

  val addcmul :
    _ t ->
    tensor1:_ t ->
    tensor2:_ t ->
    _ t

  val addcmul_ :
    _ t ->
    tensor1:_ t ->
    tensor2:_ t ->
    _ t

  val addcmul_out :
    out:_ t ->
    _ t ->
    tensor1:_ t ->
    tensor2:_ t ->
    _ t

  val addmm :
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val addmm_ :
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val addmm_out :
    out:_ t ->
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val addmv :
    _ t ->
    mat:_ t ->
    vec:_ t ->
    _ t

  val addmv_ :
    _ t ->
    mat:_ t ->
    vec:_ t ->
    _ t

  val addmv_out :
    out:_ t ->
    _ t ->
    mat:_ t ->
    vec:_ t ->
    _ t

  val addr :
    _ t ->
    vec1:_ t ->
    vec2:_ t ->
    _ t

  val addr_ :
    _ t ->
    vec1:_ t ->
    vec2:_ t ->
    _ t

  val addr_out :
    out:_ t ->
    _ t ->
    vec1:_ t ->
    vec2:_ t ->
    _ t

  val affine_grid_generator :
    theta:_ t ->
    size:int list ->
    _ t

  val affine_grid_generator_backward :
    grad:_ t ->
    size:int list ->
    _ t

  val alias :
    _ t ->
    _ t

  val all :
    _ t ->
    _ t

  val all1 :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val all_out :
    out:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val alpha_dropout :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val alpha_dropout_ :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val any :
    _ t ->
    _ t

  val any1 :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val any_out :
    out:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val arange :
    end_:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val arange1 :
    start:'a scalar ->
    end_:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val arange2 :
    start:'a scalar ->
    end_:'a scalar ->
    step:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val arange_out :
    out:_ t ->
    end_:'a scalar ->
    _ t

  val arange_out1 :
    out:_ t ->
    start:'a scalar ->
    end_:'a scalar ->
    _ t

  val argmax :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val argmin :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val argsort :
    _ t ->
    dim:int ->
    descending:bool ->
    _ t

  val as_strided :
    _ t ->
    size:int list ->
    stride:int list ->
    storage_offset:int ->
    _ t

  val as_strided_ :
    _ t ->
    size:int list ->
    stride:int list ->
    storage_offset:int ->
    _ t

  val asin :
    _ t ->
    _ t

  val asin_ :
    _ t ->
    _ t

  val asin_out :
    out:_ t ->
    _ t ->
    _ t

  val atan :
    _ t ->
    _ t

  val atan2 :
    _ t ->
    _ t ->
    _ t

  val atan2_ :
    _ t ->
    _ t ->
    _ t

  val atan2_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val atan_ :
    _ t ->
    _ t

  val atan_out :
    out:_ t ->
    _ t ->
    _ t

  val avg_pool1d :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool2d :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool2d_backward :
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool2d_out :
    out:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool3d :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool3d_backward :
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val avg_pool3d_out :
    out:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    ceil_mode:bool ->
    count_include_pad:bool ->
    _ t

  val baddbmm :
    _ t ->
    batch1:_ t ->
    batch2:_ t ->
    _ t

  val baddbmm_ :
    _ t ->
    batch1:_ t ->
    batch2:_ t ->
    _ t

  val baddbmm_out :
    out:_ t ->
    _ t ->
    batch1:_ t ->
    batch2:_ t ->
    _ t

  val bartlett_window :
    window_length:int ->
    options:Kind.packed * Device.t ->
    _ t

  val bartlett_window1 :
    window_length:int ->
    periodic:bool ->
    options:Kind.packed * Device.t ->
    _ t

  val batch_norm :
    _ t ->
    weight:_ t option ->
    bias:_ t option ->
    running_mean:_ t option ->
    running_var:_ t option ->
    training:bool ->
    momentum:float ->
    eps:float ->
    cudnn_enabled:bool ->
    _ t

  val batch_norm_backward_elemt :
    grad_out:_ t ->
    _ t ->
    mean:_ t ->
    invstd:_ t ->
    weight:_ t option ->
    mean_dy:_ t ->
    mean_dy_xmu:_ t ->
    _ t

  val batch_norm_backward_reduce :
    grad_out:_ t ->
    _ t ->
    mean:_ t ->
    invstd:_ t ->
    input_g:bool ->
    weight_g:bool ->
    bias_g:bool ->
    _ t * _ t * _ t * _ t

  val batch_norm_elemt :
    _ t ->
    weight:_ t option ->
    bias:_ t option ->
    mean:_ t ->
    invstd:_ t ->
    eps:float ->
    _ t

  val batch_norm_gather_stats :
    _ t ->
    mean:_ t ->
    invstd:_ t ->
    running_mean:_ t option ->
    running_var:_ t option ->
    momentum:float ->
    eps:float ->
    count:int ->
    _ t * _ t

  val batch_norm_stats :
    _ t ->
    eps:float ->
    _ t * _ t

  val batch_norm_update_stats :
    _ t ->
    running_mean:_ t option ->
    running_var:_ t option ->
    momentum:float ->
    _ t * _ t

  val bernoulli :
    _ t ->
    _ t

  val bernoulli1 :
    _ t ->
    p:float ->
    _ t

  val bernoulli_ :
    _ t ->
    p:_ t ->
    _ t

  val bernoulli_1 :
    _ t ->
    p:float ->
    _ t

  val bernoulli_out :
    out:_ t ->
    _ t ->
    _ t

  val bilinear :
    input1:_ t ->
    input2:_ t ->
    weight:_ t ->
    bias:_ t option ->
    _ t

  val binary_cross_entropy :
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    _ t

  val binary_cross_entropy_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t ->
    reduction:Reduction.t ->
    _ t

  val binary_cross_entropy_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t ->
    reduction:Reduction.t ->
    _ t

  val binary_cross_entropy_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    _ t

  val binary_cross_entropy_with_logits :
    _ t ->
    target:_ t ->
    weight:_ t option ->
    pos_weight:_ t option ->
    reduction:Reduction.t ->
    _ t

  val binary_cross_entropy_with_logits_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    pos_weight:_ t option ->
    reduction:Reduction.t ->
    _ t

  val bincount :
    _ t ->
    weights:_ t option ->
    minlength:int ->
    _ t

  val blackman_window :
    window_length:int ->
    options:Kind.packed * Device.t ->
    _ t

  val blackman_window1 :
    window_length:int ->
    periodic:bool ->
    options:Kind.packed * Device.t ->
    _ t

  val bmm :
    _ t ->
    mat2:_ t ->
    _ t

  val bmm_out :
    out:_ t ->
    _ t ->
    mat2:_ t ->
    _ t

  val cartesian_prod :
    _ t list ->
    _ t

  val cat :
    _ t list ->
    dim:int ->
    _ t

  val cat_out :
    out:_ t ->
    _ t list ->
    dim:int ->
    _ t

  val cauchy_ :
    _ t ->
    median:float ->
    sigma:float ->
    _ t

  val cdist :
    x1:_ t ->
    x2:_ t ->
    p:float ->
    _ t

  val ceil :
    _ t ->
    _ t

  val ceil_ :
    _ t ->
    _ t

  val ceil_out :
    out:_ t ->
    _ t ->
    _ t

  val celu :
    _ t ->
    _ t

  val celu_ :
    _ t ->
    _ t

  val chain_matmul :
    matrices:_ t list ->
    _ t

  val cholesky :
    _ t ->
    upper:bool ->
    _ t

  val cholesky_inverse :
    _ t ->
    upper:bool ->
    _ t

  val cholesky_inverse_out :
    out:_ t ->
    _ t ->
    upper:bool ->
    _ t

  val cholesky_out :
    out:_ t ->
    _ t ->
    upper:bool ->
    _ t

  val cholesky_solve :
    _ t ->
    input2:_ t ->
    upper:bool ->
    _ t

  val cholesky_solve_out :
    out:_ t ->
    _ t ->
    input2:_ t ->
    upper:bool ->
    _ t

  val chunk :
    _ t ->
    chunks:int ->
    dim:int ->
    _ t list

  val clamp :
    _ t ->
    min:'a scalar ->
    max:'a scalar ->
    _ t

  val clamp_ :
    _ t ->
    min:'a scalar ->
    max:'a scalar ->
    _ t

  val clamp_max :
    _ t ->
    max:'a scalar ->
    _ t

  val clamp_max_ :
    _ t ->
    max:'a scalar ->
    _ t

  val clamp_max_out :
    out:_ t ->
    _ t ->
    max:'a scalar ->
    _ t

  val clamp_min :
    _ t ->
    min:'a scalar ->
    _ t

  val clamp_min_ :
    _ t ->
    min:'a scalar ->
    _ t

  val clamp_min_out :
    out:_ t ->
    _ t ->
    min:'a scalar ->
    _ t

  val clamp_out :
    out:_ t ->
    _ t ->
    min:'a scalar ->
    max:'a scalar ->
    _ t

  val clone :
    _ t ->
    _ t

  val coalesce :
    _ t ->
    _ t

  val combinations :
    _ t ->
    r:int ->
    with_replacement:bool ->
    _ t

  val constant_pad_nd :
    _ t ->
    pad:int list ->
    _ t

  val contiguous :
    _ t ->
    _ t

  val conv1d :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    groups:int ->
    _ t

  val conv2d :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    groups:int ->
    _ t

  val conv3d :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    groups:int ->
    _ t

  val conv_tbc :
    _ t ->
    weight:_ t ->
    bias:_ t ->
    pad:int ->
    _ t

  val conv_tbc_backward :
    _ t ->
    _ t ->
    weight:_ t ->
    bias:_ t ->
    pad:int ->
    _ t * _ t * _ t

  val conv_transpose1d :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    stride:int list ->
    padding:int list ->
    output_padding:int list ->
    groups:int ->
    dilation:int list ->
    _ t

  val conv_transpose2d :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    stride:int list ->
    padding:int list ->
    output_padding:int list ->
    groups:int ->
    dilation:int list ->
    _ t

  val conv_transpose3d :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    stride:int list ->
    padding:int list ->
    output_padding:int list ->
    groups:int ->
    dilation:int list ->
    _ t

  val convolution :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    transposed:bool ->
    output_padding:int list ->
    groups:int ->
    _ t

  val copy_sparse_to_sparse_ :
    _ t ->
    src:_ t ->
    non_blocking:bool ->
    _ t

  val cos :
    _ t ->
    _ t

  val cos_ :
    _ t ->
    _ t

  val cos_out :
    out:_ t ->
    _ t ->
    _ t

  val cosh :
    _ t ->
    _ t

  val cosh_ :
    _ t ->
    _ t

  val cosh_out :
    out:_ t ->
    _ t ->
    _ t

  val cosine_embedding_loss :
    input1:_ t ->
    input2:_ t ->
    target:_ t ->
    margin:float ->
    reduction:Reduction.t ->
    _ t

  val cosine_similarity :
    x1:_ t ->
    x2:_ t ->
    dim:int ->
    eps:float ->
    _ t

  val cross :
    _ t ->
    _ t ->
    dim:int ->
    _ t

  val cross_out :
    out:_ t ->
    _ t ->
    _ t ->
    dim:int ->
    _ t

  val ctc_loss :
    log_probs:_ t ->
    targets:_ t ->
    input_lengths:int list ->
    target_lengths:int list ->
    blank:int ->
    reduction:Reduction.t ->
    zero_infinity:bool ->
    _ t

  val ctc_loss1 :
    log_probs:_ t ->
    targets:_ t ->
    input_lengths:_ t ->
    target_lengths:_ t ->
    blank:int ->
    reduction:Reduction.t ->
    zero_infinity:bool ->
    _ t

  val cudnn_affine_grid_generator :
    theta:_ t ->
    n:int ->
    c:int ->
    h:int ->
    w:int ->
    _ t

  val cudnn_affine_grid_generator_backward :
    grad:_ t ->
    n:int ->
    c:int ->
    h:int ->
    w:int ->
    _ t

  val cudnn_batch_norm :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    running_mean:_ t option ->
    running_var:_ t option ->
    training:bool ->
    exponential_average_factor:float ->
    epsilon:float ->
    _ t * _ t * _ t

  val cudnn_batch_norm_backward :
    _ t ->
    grad_output:_ t ->
    weight:_ t ->
    running_mean:_ t option ->
    running_var:_ t option ->
    save_mean:_ t option ->
    save_var:_ t option ->
    epsilon:float ->
    _ t * _ t * _ t

  val cudnn_convolution :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val cudnn_convolution_backward_bias :
    grad_output:_ t ->
    _ t

  val cudnn_convolution_backward_input :
    self_size:int list ->
    grad_output:_ t ->
    weight:_ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val cudnn_convolution_backward_weight :
    weight_size:int list ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val cudnn_convolution_transpose :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    padding:int list ->
    output_padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val cudnn_convolution_transpose_backward_bias :
    grad_output:_ t ->
    _ t

  val cudnn_convolution_transpose_backward_input :
    grad_output:_ t ->
    weight:_ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val cudnn_convolution_transpose_backward_weight :
    weight_size:int list ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val cudnn_grid_sampler :
    _ t ->
    grid:_ t ->
    _ t

  val cudnn_grid_sampler_backward :
    _ t ->
    grid:_ t ->
    grad_output:_ t ->
    _ t * _ t

  val cumprod :
    _ t ->
    dim:int ->
    _ t

  val cumprod1 :
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val cumprod_out :
    out:_ t ->
    _ t ->
    dim:int ->
    _ t

  val cumprod_out1 :
    out:_ t ->
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val cumsum :
    _ t ->
    dim:int ->
    _ t

  val cumsum1 :
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val cumsum_out :
    out:_ t ->
    _ t ->
    dim:int ->
    _ t

  val cumsum_out1 :
    out:_ t ->
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val dequantize :
    _ t ->
    _ t

  val det :
    _ t ->
    _ t

  val detach :
    _ t ->
    _ t

  val detach_ :
    _ t ->
    _ t

  val diag :
    _ t ->
    diagonal:int ->
    _ t

  val diag_embed :
    _ t ->
    offset:int ->
    dim1:int ->
    dim2:int ->
    _ t

  val diag_out :
    out:_ t ->
    _ t ->
    diagonal:int ->
    _ t

  val diagflat :
    _ t ->
    offset:int ->
    _ t

  val diagonal :
    _ t ->
    offset:int ->
    dim1:int ->
    dim2:int ->
    _ t

  val digamma :
    _ t ->
    _ t

  val digamma_ :
    _ t ->
    _ t

  val digamma_out :
    out:_ t ->
    _ t ->
    _ t

  val dist :
    _ t ->
    _ t ->
    _ t

  val div :
    _ t ->
    _ t ->
    _ t

  val div1 :
    _ t ->
    'a scalar ->
    _ t

  val div_ :
    _ t ->
    _ t ->
    _ t

  val div_1 :
    _ t ->
    'a scalar ->
    _ t

  val div_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val dot :
    _ t ->
    _ t ->
    _ t

  val dot_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val dropout :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val dropout_ :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val eig :
    _ t ->
    eigenvectors:bool ->
    _ t * _ t

  val eig_out :
    e:_ t ->
    v:_ t ->
    _ t ->
    eigenvectors:bool ->
    _ t * _ t

  val elu :
    _ t ->
    _ t

  val elu_ :
    _ t ->
    _ t

  val elu_backward :
    grad_output:_ t ->
    alpha:'a scalar ->
    scale:'a scalar ->
    input_scale:'a scalar ->
    output:_ t ->
    _ t

  val elu_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    alpha:'a scalar ->
    scale:'a scalar ->
    input_scale:'a scalar ->
    output:_ t ->
    _ t

  val elu_out :
    out:_ t ->
    _ t ->
    _ t

  val embedding :
    weight:_ t ->
    indices:_ t ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    sparse:bool ->
    _ t

  val embedding_backward :
    grad:_ t ->
    indices:_ t ->
    num_weights:int ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    sparse:bool ->
    _ t

  val embedding_bag :
    weight:_ t ->
    indices:_ t ->
    offsets:_ t ->
    scale_grad_by_freq:bool ->
    mode:int ->
    sparse:bool ->
    per_sample_weights:_ t option ->
    _ t * _ t * _ t * _ t

  val embedding_dense_backward :
    grad_output:_ t ->
    indices:_ t ->
    num_weights:int ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    _ t

  val embedding_renorm_ :
    _ t ->
    indices:_ t ->
    max_norm:float ->
    norm_type:float ->
    _ t

  val embedding_sparse_backward :
    grad:_ t ->
    indices:_ t ->
    num_weights:int ->
    padding_idx:int ->
    scale_grad_by_freq:bool ->
    _ t

  val empty :
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val empty_like :
    _ t ->
    _ t

  val empty_like1 :
    _ t ->
    options:Kind.packed * Device.t ->
    _ t

  val empty_out :
    out:_ t ->
    size:int list ->
    _ t

  val empty_strided :
    size:int list ->
    stride:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val eq :
    _ t ->
    'a scalar ->
    _ t

  val eq1 :
    _ t ->
    _ t ->
    _ t

  val eq_ :
    _ t ->
    'a scalar ->
    _ t

  val eq_1 :
    _ t ->
    _ t ->
    _ t

  val eq_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val eq_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val erf :
    _ t ->
    _ t

  val erf_ :
    _ t ->
    _ t

  val erf_out :
    out:_ t ->
    _ t ->
    _ t

  val erfc :
    _ t ->
    _ t

  val erfc_ :
    _ t ->
    _ t

  val erfc_out :
    out:_ t ->
    _ t ->
    _ t

  val erfinv :
    _ t ->
    _ t

  val erfinv_ :
    _ t ->
    _ t

  val erfinv_out :
    out:_ t ->
    _ t ->
    _ t

  val exp :
    _ t ->
    _ t

  val exp_ :
    _ t ->
    _ t

  val exp_out :
    out:_ t ->
    _ t ->
    _ t

  val expand :
    _ t ->
    size:int list ->
    implicit:bool ->
    _ t

  val expand_as :
    _ t ->
    _ t ->
    _ t

  val expm1 :
    _ t ->
    _ t

  val expm1_ :
    _ t ->
    _ t

  val expm1_out :
    out:_ t ->
    _ t ->
    _ t

  val exponential_ :
    _ t ->
    lambd:float ->
    _ t

  val eye :
    n:int ->
    options:Kind.packed * Device.t ->
    _ t

  val eye1 :
    n:int ->
    m:int ->
    options:Kind.packed * Device.t ->
    _ t

  val eye_out :
    out:_ t ->
    n:int ->
    _ t

  val eye_out1 :
    out:_ t ->
    n:int ->
    m:int ->
    _ t

  val fbgemm_linear_int8_weight :
    _ t ->
    weight:_ t ->
    packed:_ t ->
    col_offsets:_ t ->
    weight_scale:'a scalar ->
    weight_zero_point:'a scalar ->
    bias:_ t ->
    _ t

  val fbgemm_pack_quantized_matrix :
    _ t ->
    k:int ->
    n:int ->
    _ t

  val feature_alpha_dropout :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val feature_alpha_dropout_ :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val feature_dropout :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val feature_dropout_ :
    _ t ->
    p:float ->
    train:bool ->
    _ t

  val fft :
    _ t ->
    signal_ndim:int ->
    normalized:bool ->
    _ t

  val fill_ :
    _ t ->
    value:'a scalar ->
    _ t

  val fill_1 :
    _ t ->
    value:_ t ->
    _ t

  val flatten :
    _ t ->
    start_dim:int ->
    end_dim:int ->
    _ t

  val flip :
    _ t ->
    dims:int list ->
    _ t

  val floor :
    _ t ->
    _ t

  val floor_ :
    _ t ->
    _ t

  val floor_out :
    out:_ t ->
    _ t ->
    _ t

  val fmod :
    _ t ->
    'a scalar ->
    _ t

  val fmod1 :
    _ t ->
    _ t ->
    _ t

  val fmod_ :
    _ t ->
    'a scalar ->
    _ t

  val fmod_1 :
    _ t ->
    _ t ->
    _ t

  val fmod_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val fmod_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val frac :
    _ t ->
    _ t

  val frac_ :
    _ t ->
    _ t

  val frac_out :
    out:_ t ->
    _ t ->
    _ t

  val fractional_max_pool2d :
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    random_samples:_ t ->
    _ t * _ t

  val fractional_max_pool2d_backward :
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    indices:_ t ->
    _ t

  val fractional_max_pool2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    indices:_ t ->
    _ t

  val fractional_max_pool2d_out :
    output:_ t ->
    indices:_ t ->
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    random_samples:_ t ->
    _ t * _ t

  val fractional_max_pool3d :
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    random_samples:_ t ->
    _ t * _ t

  val fractional_max_pool3d_backward :
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    indices:_ t ->
    _ t

  val fractional_max_pool3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    indices:_ t ->
    _ t

  val fractional_max_pool3d_out :
    output:_ t ->
    indices:_ t ->
    _ t ->
    kernel_size:int list ->
    output_size:int list ->
    random_samples:_ t ->
    _ t * _ t

  val frobenius_norm :
    _ t ->
    _ t

  val frobenius_norm1 :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val frobenius_norm_out :
    out:_ t ->
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val full :
    size:int list ->
    fill_value:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val full_like :
    _ t ->
    fill_value:'a scalar ->
    _ t

  val full_like1 :
    _ t ->
    fill_value:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val full_out :
    out:_ t ->
    size:int list ->
    fill_value:'a scalar ->
    _ t

  val gather :
    _ t ->
    dim:int ->
    index:_ t ->
    sparse_grad:bool ->
    _ t

  val gather_out :
    out:_ t ->
    _ t ->
    dim:int ->
    index:_ t ->
    sparse_grad:bool ->
    _ t

  val ge :
    _ t ->
    'a scalar ->
    _ t

  val ge1 :
    _ t ->
    _ t ->
    _ t

  val ge_ :
    _ t ->
    'a scalar ->
    _ t

  val ge_1 :
    _ t ->
    _ t ->
    _ t

  val ge_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val ge_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val gels :
    _ t ->
    a:_ t ->
    _ t * _ t

  val gels_out :
    x:_ t ->
    qr:_ t ->
    _ t ->
    a:_ t ->
    _ t * _ t

  val geometric_ :
    _ t ->
    p:float ->
    _ t

  val geqrf :
    _ t ->
    _ t * _ t

  val geqrf_out :
    a:_ t ->
    tau:_ t ->
    _ t ->
    _ t * _ t

  val ger :
    _ t ->
    vec2:_ t ->
    _ t

  val ger_out :
    out:_ t ->
    _ t ->
    vec2:_ t ->
    _ t

  val glu :
    _ t ->
    dim:int ->
    _ t

  val glu_backward :
    grad_output:_ t ->
    _ t ->
    dim:int ->
    _ t

  val glu_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    dim:int ->
    _ t

  val glu_out :
    out:_ t ->
    _ t ->
    dim:int ->
    _ t

  val grad :
    _ t ->
    _ t

  val grid_sampler :
    _ t ->
    grid:_ t ->
    interpolation_mode:int ->
    padding_mode:int ->
    _ t

  val grid_sampler_2d :
    _ t ->
    grid:_ t ->
    interpolation_mode:int ->
    padding_mode:int ->
    _ t

  val grid_sampler_2d_backward :
    grad_output:_ t ->
    _ t ->
    grid:_ t ->
    interpolation_mode:int ->
    padding_mode:int ->
    _ t * _ t

  val grid_sampler_3d :
    _ t ->
    grid:_ t ->
    interpolation_mode:int ->
    padding_mode:int ->
    _ t

  val grid_sampler_3d_backward :
    grad_output:_ t ->
    _ t ->
    grid:_ t ->
    interpolation_mode:int ->
    padding_mode:int ->
    _ t * _ t

  val group_norm :
    _ t ->
    num_groups:int ->
    weight:_ t option ->
    bias:_ t option ->
    eps:float ->
    cudnn_enabled:bool ->
    _ t

  val gru :
    _ t ->
    hx:_ t ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    _ t * _ t

  val gru1 :
    data:_ t ->
    batch_sizes:_ t ->
    hx:_ t ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    _ t * _ t

  val gru_cell :
    _ t ->
    hx:_ t ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t option ->
    b_hh:_ t option ->
    _ t

  val gt :
    _ t ->
    'a scalar ->
    _ t

  val gt1 :
    _ t ->
    _ t ->
    _ t

  val gt_ :
    _ t ->
    'a scalar ->
    _ t

  val gt_1 :
    _ t ->
    _ t ->
    _ t

  val gt_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val gt_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val hamming_window :
    window_length:int ->
    options:Kind.packed * Device.t ->
    _ t

  val hamming_window1 :
    window_length:int ->
    periodic:bool ->
    options:Kind.packed * Device.t ->
    _ t

  val hamming_window2 :
    window_length:int ->
    periodic:bool ->
    alpha:float ->
    options:Kind.packed * Device.t ->
    _ t

  val hamming_window3 :
    window_length:int ->
    periodic:bool ->
    alpha:float ->
    beta:float ->
    options:Kind.packed * Device.t ->
    _ t

  val hann_window :
    window_length:int ->
    options:Kind.packed * Device.t ->
    _ t

  val hann_window1 :
    window_length:int ->
    periodic:bool ->
    options:Kind.packed * Device.t ->
    _ t

  val hardshrink :
    _ t ->
    _ t

  val hardshrink_backward :
    grad_out:_ t ->
    _ t ->
    lambd:'a scalar ->
    _ t

  val hardtanh :
    _ t ->
    _ t

  val hardtanh_ :
    _ t ->
    _ t

  val hardtanh_backward :
    grad_output:_ t ->
    _ t ->
    min_val:'a scalar ->
    max_val:'a scalar ->
    _ t

  val hardtanh_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    min_val:'a scalar ->
    max_val:'a scalar ->
    _ t

  val hardtanh_out :
    out:_ t ->
    _ t ->
    _ t

  val hinge_embedding_loss :
    _ t ->
    target:_ t ->
    margin:float ->
    reduction:Reduction.t ->
    _ t

  val histc :
    _ t ->
    bins:int ->
    _ t

  val histc_out :
    out:_ t ->
    _ t ->
    bins:int ->
    _ t

  val hspmm :
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val hspmm_out :
    out:_ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val ifft :
    _ t ->
    signal_ndim:int ->
    normalized:bool ->
    _ t

  val index :
    _ t ->
    indices:_ t list ->
    _ t

  val index_add :
    _ t ->
    dim:int ->
    index:_ t ->
    source:_ t ->
    _ t

  val index_add_ :
    _ t ->
    dim:int ->
    index:_ t ->
    source:_ t ->
    _ t

  val index_copy :
    _ t ->
    dim:int ->
    index:_ t ->
    source:_ t ->
    _ t

  val index_copy_ :
    _ t ->
    dim:int ->
    index:_ t ->
    source:_ t ->
    _ t

  val index_fill :
    _ t ->
    dim:int ->
    index:_ t ->
    value:'a scalar ->
    _ t

  val index_fill1 :
    _ t ->
    dim:int ->
    index:_ t ->
    value:_ t ->
    _ t

  val index_fill_ :
    _ t ->
    dim:int ->
    index:_ t ->
    value:'a scalar ->
    _ t

  val index_fill_1 :
    _ t ->
    dim:int ->
    index:_ t ->
    value:_ t ->
    _ t

  val index_put :
    _ t ->
    indices:_ t list ->
    values:_ t ->
    accumulate:bool ->
    _ t

  val index_put_ :
    _ t ->
    indices:_ t list ->
    values:_ t ->
    accumulate:bool ->
    _ t

  val index_select :
    _ t ->
    dim:int ->
    index:_ t ->
    _ t

  val index_select_out :
    out:_ t ->
    _ t ->
    dim:int ->
    index:_ t ->
    _ t

  val indices :
    _ t ->
    _ t

  val instance_norm :
    _ t ->
    weight:_ t option ->
    bias:_ t option ->
    running_mean:_ t option ->
    running_var:_ t option ->
    use_input_stats:bool ->
    momentum:float ->
    eps:float ->
    cudnn_enabled:bool ->
    _ t

  val int_repr :
    _ t ->
    _ t

  val inverse :
    _ t ->
    _ t

  val inverse_out :
    out:_ t ->
    _ t ->
    _ t

  val irfft :
    _ t ->
    signal_ndim:int ->
    normalized:bool ->
    onesided:bool ->
    signal_sizes:int list ->
    _ t

  val isclose :
    _ t ->
    _ t ->
    rtol:float ->
    atol:float ->
    equal_nan:bool ->
    _ t

  val isnan :
    _ t ->
    _ t

  val kl_div :
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val kl_div_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val kthvalue :
    _ t ->
    k:int ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val kthvalue_out :
    values:_ t ->
    indices:_ t ->
    _ t ->
    k:int ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val l1_loss :
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val l1_loss_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val l1_loss_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val l1_loss_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val layer_norm :
    _ t ->
    normalized_shape:int list ->
    weight:_ t option ->
    bias:_ t option ->
    eps:float ->
    cudnn_enable:bool ->
    _ t

  val le :
    _ t ->
    'a scalar ->
    _ t

  val le1 :
    _ t ->
    _ t ->
    _ t

  val le_ :
    _ t ->
    'a scalar ->
    _ t

  val le_1 :
    _ t ->
    _ t ->
    _ t

  val le_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val le_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val leaky_relu :
    _ t ->
    _ t

  val leaky_relu_ :
    _ t ->
    _ t

  val leaky_relu_backward :
    grad_output:_ t ->
    _ t ->
    negative_slope:'a scalar ->
    _ t

  val leaky_relu_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    negative_slope:'a scalar ->
    _ t

  val leaky_relu_out :
    out:_ t ->
    _ t ->
    _ t

  val lerp :
    _ t ->
    end_:_ t ->
    weight:'a scalar ->
    _ t

  val lerp1 :
    _ t ->
    end_:_ t ->
    weight:_ t ->
    _ t

  val lerp_ :
    _ t ->
    end_:_ t ->
    weight:'a scalar ->
    _ t

  val lerp_1 :
    _ t ->
    end_:_ t ->
    weight:_ t ->
    _ t

  val lerp_out :
    out:_ t ->
    _ t ->
    end_:_ t ->
    weight:'a scalar ->
    _ t

  val lerp_out1 :
    out:_ t ->
    _ t ->
    end_:_ t ->
    weight:_ t ->
    _ t

  val lgamma :
    _ t ->
    _ t

  val lgamma_ :
    _ t ->
    _ t

  val lgamma_out :
    out:_ t ->
    _ t ->
    _ t

  val linear :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    _ t

  val linspace :
    start:'a scalar ->
    end_:'a scalar ->
    steps:int ->
    options:Kind.packed * Device.t ->
    _ t

  val linspace_out :
    out:_ t ->
    start:'a scalar ->
    end_:'a scalar ->
    steps:int ->
    _ t

  val log :
    _ t ->
    _ t

  val log10 :
    _ t ->
    _ t

  val log10_ :
    _ t ->
    _ t

  val log10_out :
    out:_ t ->
    _ t ->
    _ t

  val log1p :
    _ t ->
    _ t

  val log1p_ :
    _ t ->
    _ t

  val log1p_out :
    out:_ t ->
    _ t ->
    _ t

  val log2 :
    _ t ->
    _ t

  val log2_ :
    _ t ->
    _ t

  val log2_out :
    out:_ t ->
    _ t ->
    _ t

  val log_ :
    _ t ->
    _ t

  val log_normal_ :
    _ t ->
    mean:float ->
    std:float ->
    _ t

  val log_out :
    out:_ t ->
    _ t ->
    _ t

  val log_sigmoid :
    _ t ->
    _ t

  val log_sigmoid_backward :
    grad_output:_ t ->
    _ t ->
    buffer:_ t ->
    _ t

  val log_sigmoid_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    buffer:_ t ->
    _ t

  val log_sigmoid_out :
    out:_ t ->
    _ t ->
    _ t

  val log_softmax :
    _ t ->
    dim:int ->
    _ t

  val log_softmax1 :
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val logdet :
    _ t ->
    _ t

  val logspace :
    start:'a scalar ->
    end_:'a scalar ->
    steps:int ->
    base:float ->
    options:Kind.packed * Device.t ->
    _ t

  val logspace_out :
    out:_ t ->
    start:'a scalar ->
    end_:'a scalar ->
    steps:int ->
    base:float ->
    _ t

  val logsumexp :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val logsumexp_out :
    out:_ t ->
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val lstm :
    _ t ->
    hx:_ t list ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    _ t * _ t * _ t

  val lstm1 :
    data:_ t ->
    batch_sizes:_ t ->
    hx:_ t list ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    _ t * _ t * _ t

  val lstm_cell :
    _ t ->
    hx:_ t list ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t option ->
    b_hh:_ t option ->
    _ t * _ t

  val lt :
    _ t ->
    'a scalar ->
    _ t

  val lt1 :
    _ t ->
    _ t ->
    _ t

  val lt_ :
    _ t ->
    'a scalar ->
    _ t

  val lt_1 :
    _ t ->
    _ t ->
    _ t

  val lt_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val lt_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val lu_solve :
    _ t ->
    lu_data:_ t ->
    lu_pivots:_ t ->
    _ t

  val lu_solve_out :
    out:_ t ->
    _ t ->
    lu_data:_ t ->
    lu_pivots:_ t ->
    _ t

  val margin_ranking_loss :
    input1:_ t ->
    input2:_ t ->
    target:_ t ->
    margin:float ->
    reduction:Reduction.t ->
    _ t

  val masked_fill :
    _ t ->
    mask:_ t ->
    value:'a scalar ->
    _ t

  val masked_fill1 :
    _ t ->
    mask:_ t ->
    value:_ t ->
    _ t

  val masked_fill_ :
    _ t ->
    mask:_ t ->
    value:'a scalar ->
    _ t

  val masked_fill_1 :
    _ t ->
    mask:_ t ->
    value:_ t ->
    _ t

  val masked_scatter :
    _ t ->
    mask:_ t ->
    source:_ t ->
    _ t

  val masked_scatter_ :
    _ t ->
    mask:_ t ->
    source:_ t ->
    _ t

  val masked_select :
    _ t ->
    mask:_ t ->
    _ t

  val masked_select_out :
    out:_ t ->
    _ t ->
    mask:_ t ->
    _ t

  val matmul :
    _ t ->
    _ t ->
    _ t

  val matmul_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val matrix_power :
    _ t ->
    n:int ->
    _ t

  val matrix_rank :
    _ t ->
    symmetric:bool ->
    _ t

  val matrix_rank1 :
    _ t ->
    tol:float ->
    symmetric:bool ->
    _ t

  val max :
    _ t ->
    _ t

  val max1 :
    _ t ->
    _ t ->
    _ t

  val max2 :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val max_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val max_out1 :
    max:_ t ->
    max_values:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val max_pool1d :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t

  val max_pool1d_with_indices :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t * _ t

  val max_pool2d :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t

  val max_pool2d_with_indices :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t * _ t

  val max_pool2d_with_indices_backward :
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:_ t ->
    _ t

  val max_pool2d_with_indices_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:_ t ->
    _ t

  val max_pool2d_with_indices_out :
    output:_ t ->
    indices:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t * _ t

  val max_pool3d :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t

  val max_pool3d_with_indices :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t * _ t

  val max_pool3d_with_indices_backward :
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:_ t ->
    _ t

  val max_pool3d_with_indices_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    indices:_ t ->
    _ t

  val max_pool3d_with_indices_out :
    output:_ t ->
    indices:_ t ->
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t * _ t

  val max_unpool2d :
    _ t ->
    indices:_ t ->
    output_size:int list ->
    _ t

  val max_unpool2d_backward :
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    output_size:int list ->
    _ t

  val max_unpool2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    output_size:int list ->
    _ t

  val max_unpool2d_out :
    out:_ t ->
    _ t ->
    indices:_ t ->
    output_size:int list ->
    _ t

  val max_unpool3d :
    _ t ->
    indices:_ t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    _ t

  val max_unpool3d_backward :
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    _ t

  val max_unpool3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    indices:_ t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    _ t

  val max_unpool3d_out :
    out:_ t ->
    _ t ->
    indices:_ t ->
    output_size:int list ->
    stride:int list ->
    padding:int list ->
    _ t

  val max_values :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val mean :
    _ t ->
    _ t

  val mean1 :
    _ t ->
    dtype:Kind.packed ->
    _ t

  val mean2 :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val mean3 :
    _ t ->
    dim:int list ->
    dtype:Kind.packed ->
    _ t

  val mean4 :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val mean_out :
    out:_ t ->
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val mean_out1 :
    out:_ t ->
    _ t ->
    dim:int list ->
    dtype:Kind.packed ->
    _ t

  val mean_out2 :
    out:_ t ->
    _ t ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val median :
    _ t ->
    _ t

  val median1 :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val median_out :
    values:_ t ->
    indices:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val meshgrid :
    _ t list ->
    _ t list

  val min :
    _ t ->
    _ t

  val min1 :
    _ t ->
    _ t ->
    _ t

  val min2 :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val min_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val min_out1 :
    min:_ t ->
    min_indices:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val min_values :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val miopen_batch_norm :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    running_mean:_ t option ->
    running_var:_ t option ->
    training:bool ->
    exponential_average_factor:float ->
    epsilon:float ->
    _ t * _ t * _ t

  val miopen_batch_norm_backward :
    _ t ->
    grad_output:_ t ->
    weight:_ t ->
    running_mean:_ t option ->
    running_var:_ t option ->
    save_mean:_ t option ->
    save_var:_ t option ->
    epsilon:float ->
    _ t * _ t * _ t

  val miopen_convolution :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_convolution_backward_bias :
    grad_output:_ t ->
    _ t

  val miopen_convolution_backward_input :
    self_size:int list ->
    grad_output:_ t ->
    weight:_ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_convolution_backward_weight :
    weight_size:int list ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_convolution_transpose :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    padding:int list ->
    output_padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_convolution_transpose_backward_input :
    grad_output:_ t ->
    weight:_ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_convolution_transpose_backward_weight :
    weight_size:int list ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_depthwise_convolution :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_depthwise_convolution_backward_input :
    self_size:int list ->
    grad_output:_ t ->
    weight:_ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val miopen_depthwise_convolution_backward_weight :
    weight_size:int list ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    benchmark:bool ->
    deterministic:bool ->
    _ t

  val mkldnn_convolution :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    _ t

  val mkldnn_convolution_backward_input :
    self_size:int list ->
    grad_output:_ t ->
    weight:_ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    bias_defined:bool ->
    _ t

  val mkldnn_convolution_backward_weights :
    weight_size:int list ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    bias_defined:bool ->
    _ t * _ t

  val mkldnn_linear :
    _ t ->
    weight:_ t ->
    bias:_ t option ->
    _ t

  val mkldnn_max_pool2d :
    _ t ->
    kernel_size:int list ->
    stride:int list ->
    padding:int list ->
    dilation:int list ->
    ceil_mode:bool ->
    _ t

  val mkldnn_reorder_conv2d_weight :
    _ t ->
    padding:int list ->
    stride:int list ->
    dilation:int list ->
    groups:int ->
    _ t

  val mkldnn_reshape :
    _ t ->
    shape:int list ->
    _ t

  val mm :
    _ t ->
    mat2:_ t ->
    _ t

  val mm_out :
    out:_ t ->
    _ t ->
    mat2:_ t ->
    _ t

  val mode :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val mode_out :
    values:_ t ->
    indices:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t * _ t

  val mse_loss :
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val mse_loss_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val mse_loss_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val mse_loss_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val mul :
    _ t ->
    _ t ->
    _ t

  val mul1 :
    _ t ->
    'a scalar ->
    _ t

  val mul_ :
    _ t ->
    _ t ->
    _ t

  val mul_1 :
    _ t ->
    'a scalar ->
    _ t

  val mul_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val multi_margin_loss_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    p:'a scalar ->
    margin:'a scalar ->
    weight:_ t ->
    reduction:Reduction.t ->
    _ t

  val multi_margin_loss_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    p:'a scalar ->
    margin:'a scalar ->
    weight:_ t ->
    reduction:Reduction.t ->
    _ t

  val multilabel_margin_loss :
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val multilabel_margin_loss_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    is_target:_ t ->
    _ t

  val multilabel_margin_loss_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    is_target:_ t ->
    _ t

  val multilabel_margin_loss_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val multinomial :
    _ t ->
    num_samples:int ->
    replacement:bool ->
    _ t

  val multinomial_out :
    out:_ t ->
    _ t ->
    num_samples:int ->
    replacement:bool ->
    _ t

  val mv :
    _ t ->
    vec:_ t ->
    _ t

  val mv_out :
    out:_ t ->
    _ t ->
    vec:_ t ->
    _ t

  val mvlgamma :
    _ t ->
    p:int ->
    _ t

  val mvlgamma_ :
    _ t ->
    p:int ->
    _ t

  val narrow :
    _ t ->
    dim:int ->
    start:int ->
    length:int ->
    _ t

  val narrow_copy :
    _ t ->
    dim:int ->
    start:int ->
    length:int ->
    _ t

  val native_batch_norm :
    _ t ->
    weight:_ t option ->
    bias:_ t option ->
    running_mean:_ t option ->
    running_var:_ t option ->
    training:bool ->
    momentum:float ->
    eps:float ->
    _ t * _ t * _ t

  val native_norm :
    _ t ->
    _ t

  val ne :
    _ t ->
    'a scalar ->
    _ t

  val ne1 :
    _ t ->
    _ t ->
    _ t

  val ne_ :
    _ t ->
    'a scalar ->
    _ t

  val ne_1 :
    _ t ->
    _ t ->
    _ t

  val ne_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val ne_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val neg :
    _ t ->
    _ t

  val neg_ :
    _ t ->
    _ t

  val neg_out :
    out:_ t ->
    _ t ->
    _ t

  val nll_loss :
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    _ t

  val nll_loss2d :
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    _ t

  val nll_loss2d_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    total_weight:_ t ->
    _ t

  val nll_loss2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    total_weight:_ t ->
    _ t

  val nll_loss2d_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    _ t

  val nll_loss_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    total_weight:_ t ->
    _ t

  val nll_loss_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    total_weight:_ t ->
    _ t

  val nll_loss_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    weight:_ t option ->
    reduction:Reduction.t ->
    ignore_index:int ->
    _ t

  val nonzero :
    _ t ->
    _ t

  val nonzero_out :
    out:_ t ->
    _ t ->
    _ t

  val norm :
    _ t ->
    _ t

  val norm1 :
    _ t ->
    p:'a scalar ->
    dtype:Kind.packed ->
    _ t

  val norm2 :
    _ t ->
    p:'a scalar ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val norm3 :
    _ t ->
    p:'a scalar ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val norm_except_dim :
    v:_ t ->
    pow:int ->
    dim:int ->
    _ t

  val norm_out :
    out:_ t ->
    _ t ->
    p:'a scalar ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val norm_out1 :
    out:_ t ->
    _ t ->
    p:'a scalar ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val normal :
    mean:_ t ->
    std:float ->
    _ t

  val normal1 :
    mean:float ->
    std:_ t ->
    _ t

  val normal2 :
    mean:_ t ->
    std:_ t ->
    _ t

  val normal_ :
    _ t ->
    mean:float ->
    std:float ->
    _ t

  val normal_out :
    out:_ t ->
    mean:_ t ->
    std:float ->
    _ t

  val normal_out1 :
    out:_ t ->
    mean:float ->
    std:_ t ->
    _ t

  val normal_out2 :
    out:_ t ->
    mean:_ t ->
    std:_ t ->
    _ t

  val nuclear_norm :
    _ t ->
    keepdim:bool ->
    _ t

  val nuclear_norm_out :
    out:_ t ->
    _ t ->
    keepdim:bool ->
    _ t

  val one_hot :
    _ t ->
    num_classes:int ->
    _ t

  val ones :
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val ones_like :
    _ t ->
    _ t

  val ones_like1 :
    _ t ->
    options:Kind.packed * Device.t ->
    _ t

  val ones_out :
    out:_ t ->
    size:int list ->
    _ t

  val orgqr :
    _ t ->
    input2:_ t ->
    _ t

  val orgqr_out :
    out:_ t ->
    _ t ->
    input2:_ t ->
    _ t

  val ormqr :
    _ t ->
    input2:_ t ->
    input3:_ t ->
    left:bool ->
    transpose:bool ->
    _ t

  val ormqr_out :
    out:_ t ->
    _ t ->
    input2:_ t ->
    input3:_ t ->
    left:bool ->
    transpose:bool ->
    _ t

  val pairwise_distance :
    x1:_ t ->
    x2:_ t ->
    p:float ->
    eps:float ->
    keepdim:bool ->
    _ t

  val pdist :
    _ t ->
    p:float ->
    _ t

  val permute :
    _ t ->
    dims:int list ->
    _ t

  val pin_memory :
    _ t ->
    _ t

  val pinverse :
    _ t ->
    rcond:float ->
    _ t

  val pixel_shuffle :
    _ t ->
    upscale_factor:int ->
    _ t

  val poisson :
    _ t ->
    _ t

  val polygamma :
    n:int ->
    _ t ->
    _ t

  val polygamma_ :
    _ t ->
    n:int ->
    _ t

  val polygamma_out :
    out:_ t ->
    n:int ->
    _ t ->
    _ t

  val pow :
    _ t ->
    exponent:'a scalar ->
    _ t

  val pow1 :
    _ t ->
    exponent:_ t ->
    _ t

  val pow2 :
    'a scalar ->
    exponent:_ t ->
    _ t

  val pow_ :
    _ t ->
    exponent:'a scalar ->
    _ t

  val pow_1 :
    _ t ->
    exponent:_ t ->
    _ t

  val pow_out :
    out:_ t ->
    _ t ->
    exponent:'a scalar ->
    _ t

  val pow_out1 :
    out:_ t ->
    _ t ->
    exponent:_ t ->
    _ t

  val pow_out2 :
    out:_ t ->
    'a scalar ->
    exponent:_ t ->
    _ t

  val prelu :
    _ t ->
    weight:_ t ->
    _ t

  val prelu_backward :
    grad_output:_ t ->
    _ t ->
    weight:_ t ->
    _ t * _ t

  val prod :
    _ t ->
    _ t

  val prod1 :
    _ t ->
    dtype:Kind.packed ->
    _ t

  val prod2 :
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val prod3 :
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val prod4 :
    _ t ->
    dim:int ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val prod_out :
    out:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    _ t

  val prod_out1 :
    out:_ t ->
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val prod_out2 :
    out:_ t ->
    _ t ->
    dim:int ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val pstrf :
    _ t ->
    upper:bool ->
    _ t * _ t

  val pstrf_out :
    u:_ t ->
    pivot:_ t ->
    _ t ->
    upper:bool ->
    _ t * _ t

  val put_ :
    _ t ->
    index:_ t ->
    source:_ t ->
    accumulate:bool ->
    _ t

  val qr :
    _ t ->
    _ t * _ t

  val qr_out :
    q:_ t ->
    r:_ t ->
    _ t ->
    _ t * _ t

  val quantize_linear :
    _ t ->
    scale:float ->
    zero_point:int ->
    _ t

  val quantized_gru_cell :
    _ t ->
    hx:_ t ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t ->
    b_hh:_ t ->
    packed_ih:_ t ->
    packed_hh:_ t ->
    col_offsets_ih:_ t ->
    col_offsets_hh:_ t ->
    scale_ih:'a scalar ->
    scale_hh:'a scalar ->
    zero_point_ih:'a scalar ->
    zero_point_hh:'a scalar ->
    _ t

  val quantized_lstm :
    _ t ->
    hx:_ t list ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    _ t * _ t * _ t

  val quantized_lstm_cell :
    _ t ->
    hx:_ t list ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t ->
    b_hh:_ t ->
    packed_ih:_ t ->
    packed_hh:_ t ->
    col_offsets_ih:_ t ->
    col_offsets_hh:_ t ->
    scale_ih:'a scalar ->
    scale_hh:'a scalar ->
    zero_point_ih:'a scalar ->
    zero_point_hh:'a scalar ->
    _ t * _ t

  val quantized_rnn_relu_cell :
    _ t ->
    hx:_ t ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t ->
    b_hh:_ t ->
    packed_ih:_ t ->
    packed_hh:_ t ->
    col_offsets_ih:_ t ->
    col_offsets_hh:_ t ->
    scale_ih:'a scalar ->
    scale_hh:'a scalar ->
    zero_point_ih:'a scalar ->
    zero_point_hh:'a scalar ->
    _ t

  val quantized_rnn_tanh_cell :
    _ t ->
    hx:_ t ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t ->
    b_hh:_ t ->
    packed_ih:_ t ->
    packed_hh:_ t ->
    col_offsets_ih:_ t ->
    col_offsets_hh:_ t ->
    scale_ih:'a scalar ->
    scale_hh:'a scalar ->
    zero_point_ih:'a scalar ->
    zero_point_hh:'a scalar ->
    _ t

  val rand :
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val rand_like :
    _ t ->
    _ t

  val rand_like1 :
    _ t ->
    options:Kind.packed * Device.t ->
    _ t

  val rand_out :
    out:_ t ->
    size:int list ->
    _ t

  val randint :
    high:int ->
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val randint1 :
    low:int ->
    high:int ->
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val randint_like :
    _ t ->
    high:int ->
    _ t

  val randint_like1 :
    _ t ->
    low:int ->
    high:int ->
    _ t

  val randint_like2 :
    _ t ->
    high:int ->
    options:Kind.packed * Device.t ->
    _ t

  val randint_like3 :
    _ t ->
    low:int ->
    high:int ->
    options:Kind.packed * Device.t ->
    _ t

  val randint_out :
    out:_ t ->
    high:int ->
    size:int list ->
    _ t

  val randint_out1 :
    out:_ t ->
    low:int ->
    high:int ->
    size:int list ->
    _ t

  val randn :
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val randn_like :
    _ t ->
    _ t

  val randn_like1 :
    _ t ->
    options:Kind.packed * Device.t ->
    _ t

  val randn_out :
    out:_ t ->
    size:int list ->
    _ t

  val random_ :
    _ t ->
    _ t

  val random_1 :
    _ t ->
    to_:int ->
    _ t

  val random_2 :
    _ t ->
    from:int ->
    to_:int ->
    _ t

  val randperm :
    n:int ->
    options:Kind.packed * Device.t ->
    _ t

  val randperm_out :
    out:_ t ->
    n:int ->
    _ t

  val range :
    start:'a scalar ->
    end_:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val range1 :
    start:'a scalar ->
    end_:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val range_out :
    out:_ t ->
    start:'a scalar ->
    end_:'a scalar ->
    _ t

  val reciprocal :
    _ t ->
    _ t

  val reciprocal_ :
    _ t ->
    _ t

  val reciprocal_out :
    out:_ t ->
    _ t ->
    _ t

  val reflection_pad1d :
    _ t ->
    padding:int list ->
    _ t

  val reflection_pad1d_backward :
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val reflection_pad1d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val reflection_pad1d_out :
    out:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val reflection_pad2d :
    _ t ->
    padding:int list ->
    _ t

  val reflection_pad2d_backward :
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val reflection_pad2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val reflection_pad2d_out :
    out:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val relu :
    _ t ->
    _ t

  val relu_ :
    _ t ->
    _ t

  val remainder :
    _ t ->
    'a scalar ->
    _ t

  val remainder1 :
    _ t ->
    _ t ->
    _ t

  val remainder_ :
    _ t ->
    'a scalar ->
    _ t

  val remainder_1 :
    _ t ->
    _ t ->
    _ t

  val remainder_out :
    out:_ t ->
    _ t ->
    'a scalar ->
    _ t

  val remainder_out1 :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val renorm :
    _ t ->
    p:'a scalar ->
    dim:int ->
    maxnorm:'a scalar ->
    _ t

  val renorm_ :
    _ t ->
    p:'a scalar ->
    dim:int ->
    maxnorm:'a scalar ->
    _ t

  val renorm_out :
    out:_ t ->
    _ t ->
    p:'a scalar ->
    dim:int ->
    maxnorm:'a scalar ->
    _ t

  val repeat :
    _ t ->
    repeats:int list ->
    _ t

  val repeat_interleave :
    repeats:_ t ->
    _ t

  val repeat_interleave1 :
    _ t ->
    repeats:_ t ->
    dim:int ->
    _ t

  val repeat_interleave2 :
    _ t ->
    repeats:int ->
    dim:int ->
    _ t

  val replication_pad1d :
    _ t ->
    padding:int list ->
    _ t

  val replication_pad1d_backward :
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad1d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad1d_out :
    out:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad2d :
    _ t ->
    padding:int list ->
    _ t

  val replication_pad2d_backward :
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad2d_out :
    out:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad3d :
    _ t ->
    padding:int list ->
    _ t

  val replication_pad3d_backward :
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val replication_pad3d_out :
    out:_ t ->
    _ t ->
    padding:int list ->
    _ t

  val reshape :
    _ t ->
    shape:int list ->
    _ t

  val reshape_as :
    _ t ->
    _ t ->
    _ t

  val resize_ :
    _ t ->
    size:int list ->
    _ t

  val resize_as_ :
    _ t ->
    the_template:_ t ->
    _ t

  val rfft :
    _ t ->
    signal_ndim:int ->
    normalized:bool ->
    onesided:bool ->
    _ t

  val rnn_relu :
    _ t ->
    hx:_ t ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    _ t * _ t

  val rnn_relu1 :
    data:_ t ->
    batch_sizes:_ t ->
    hx:_ t ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    _ t * _ t

  val rnn_relu_cell :
    _ t ->
    hx:_ t ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t option ->
    b_hh:_ t option ->
    _ t

  val rnn_tanh :
    _ t ->
    hx:_ t ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    batch_first:bool ->
    _ t * _ t

  val rnn_tanh1 :
    data:_ t ->
    batch_sizes:_ t ->
    hx:_ t ->
    params:_ t list ->
    has_biases:bool ->
    num_layers:int ->
    dropout:float ->
    train:bool ->
    bidirectional:bool ->
    _ t * _ t

  val rnn_tanh_cell :
    _ t ->
    hx:_ t ->
    w_ih:_ t ->
    w_hh:_ t ->
    b_ih:_ t option ->
    b_hh:_ t option ->
    _ t

  val roll :
    _ t ->
    shifts:int list ->
    dims:int list ->
    _ t

  val rot90 :
    _ t ->
    k:int ->
    dims:int list ->
    _ t

  val round :
    _ t ->
    _ t

  val round_ :
    _ t ->
    _ t

  val round_out :
    out:_ t ->
    _ t ->
    _ t

  val rrelu :
    _ t ->
    training:bool ->
    _ t

  val rrelu_ :
    _ t ->
    training:bool ->
    _ t

  val rrelu_with_noise :
    _ t ->
    noise:_ t ->
    training:bool ->
    _ t

  val rrelu_with_noise_ :
    _ t ->
    noise:_ t ->
    training:bool ->
    _ t

  val rrelu_with_noise_backward :
    grad_output:_ t ->
    _ t ->
    noise:_ t ->
    lower:'a scalar ->
    upper:'a scalar ->
    training:bool ->
    _ t

  val rrelu_with_noise_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    noise:_ t ->
    lower:'a scalar ->
    upper:'a scalar ->
    training:bool ->
    _ t

  val rrelu_with_noise_out :
    out:_ t ->
    _ t ->
    noise:_ t ->
    training:bool ->
    _ t

  val rsqrt :
    _ t ->
    _ t

  val rsqrt_ :
    _ t ->
    _ t

  val rsqrt_out :
    out:_ t ->
    _ t ->
    _ t

  val rsub :
    _ t ->
    _ t ->
    _ t

  val rsub1 :
    _ t ->
    'a scalar ->
    _ t

  val s_copy_ :
    _ t ->
    src:_ t ->
    non_blocking:bool ->
    _ t

  val s_native_addmm :
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val s_native_addmm_ :
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val s_native_addmm_out :
    out:_ t ->
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val scalar_tensor :
    s:'a scalar ->
    options:Kind.packed * Device.t ->
    _ t

  val scatter :
    _ t ->
    dim:int ->
    index:_ t ->
    src:_ t ->
    _ t

  val scatter1 :
    _ t ->
    dim:int ->
    index:_ t ->
    value:'a scalar ->
    _ t

  val scatter_ :
    _ t ->
    dim:int ->
    index:_ t ->
    src:_ t ->
    _ t

  val scatter_1 :
    _ t ->
    dim:int ->
    index:_ t ->
    value:'a scalar ->
    _ t

  val scatter_add :
    _ t ->
    dim:int ->
    index:_ t ->
    src:_ t ->
    _ t

  val scatter_add_ :
    _ t ->
    dim:int ->
    index:_ t ->
    src:_ t ->
    _ t

  val select :
    _ t ->
    dim:int ->
    index:int ->
    _ t

  val selu :
    _ t ->
    _ t

  val selu_ :
    _ t ->
    _ t

  val set_ :
    _ t ->
    _ t

  val set_1 :
    _ t ->
    source:_ t ->
    _ t

  val set_requires_grad :
    _ t ->
    r:bool ->
    _ t

  val sigmoid :
    _ t ->
    _ t

  val sigmoid_ :
    _ t ->
    _ t

  val sigmoid_backward :
    grad_output:_ t ->
    output:_ t ->
    _ t

  val sigmoid_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output:_ t ->
    _ t

  val sigmoid_out :
    out:_ t ->
    _ t ->
    _ t

  val sign :
    _ t ->
    _ t

  val sign_ :
    _ t ->
    _ t

  val sign_out :
    out:_ t ->
    _ t ->
    _ t

  val sin :
    _ t ->
    _ t

  val sin_ :
    _ t ->
    _ t

  val sin_out :
    out:_ t ->
    _ t ->
    _ t

  val sinh :
    _ t ->
    _ t

  val sinh_ :
    _ t ->
    _ t

  val sinh_out :
    out:_ t ->
    _ t ->
    _ t

  val slice :
    _ t ->
    dim:int ->
    start:int ->
    end_:int ->
    step:int ->
    _ t

  val slogdet :
    _ t ->
    _ t * _ t

  val smm :
    _ t ->
    mat2:_ t ->
    _ t

  val smooth_l1_loss :
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val smooth_l1_loss_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val smooth_l1_loss_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val smooth_l1_loss_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val soft_margin_loss :
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val soft_margin_loss_backward :
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val soft_margin_loss_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val soft_margin_loss_out :
    out:_ t ->
    _ t ->
    target:_ t ->
    reduction:Reduction.t ->
    _ t

  val softmax :
    _ t ->
    dim:int ->
    _ t

  val softmax1 :
    _ t ->
    dim:int ->
    dtype:Kind.packed ->
    _ t

  val softplus :
    _ t ->
    _ t

  val softplus_backward :
    grad_output:_ t ->
    _ t ->
    beta:'a scalar ->
    threshold:'a scalar ->
    output:_ t ->
    _ t

  val softplus_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    beta:'a scalar ->
    threshold:'a scalar ->
    output:_ t ->
    _ t

  val softplus_out :
    out:_ t ->
    _ t ->
    _ t

  val softshrink :
    _ t ->
    _ t

  val softshrink_backward :
    grad_output:_ t ->
    _ t ->
    lambd:'a scalar ->
    _ t

  val softshrink_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    _ t ->
    lambd:'a scalar ->
    _ t

  val softshrink_out :
    out:_ t ->
    _ t ->
    _ t

  val solve :
    _ t ->
    a:_ t ->
    _ t * _ t

  val solve_out :
    solution:_ t ->
    lu:_ t ->
    _ t ->
    a:_ t ->
    _ t * _ t

  val sort :
    _ t ->
    dim:int ->
    descending:bool ->
    _ t * _ t

  val sort_out :
    values:_ t ->
    indices:_ t ->
    _ t ->
    dim:int ->
    descending:bool ->
    _ t * _ t

  val sparse_coo_tensor :
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val sparse_coo_tensor1 :
    indices:_ t ->
    values:_ t ->
    options:Kind.packed * Device.t ->
    _ t

  val sparse_coo_tensor2 :
    indices:_ t ->
    values:_ t ->
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val sparse_resize_ :
    _ t ->
    size:int list ->
    sparse_dim:int ->
    dense_dim:int ->
    _ t

  val sparse_resize_and_clear_ :
    _ t ->
    size:int list ->
    sparse_dim:int ->
    dense_dim:int ->
    _ t

  val split :
    _ t ->
    split_size:int ->
    dim:int ->
    _ t list

  val split_with_sizes :
    _ t ->
    split_sizes:int list ->
    dim:int ->
    _ t list

  val sqrt :
    _ t ->
    _ t

  val sqrt_ :
    _ t ->
    _ t

  val sqrt_out :
    out:_ t ->
    _ t ->
    _ t

  val squeeze :
    _ t ->
    _ t

  val squeeze1 :
    _ t ->
    dim:int ->
    _ t

  val squeeze_ :
    _ t ->
    _ t

  val squeeze_1 :
    _ t ->
    dim:int ->
    _ t

  val sspaddmm :
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val sspaddmm_out :
    out:_ t ->
    _ t ->
    mat1:_ t ->
    mat2:_ t ->
    _ t

  val stack :
    _ t list ->
    dim:int ->
    _ t

  val stack_out :
    out:_ t ->
    _ t list ->
    dim:int ->
    _ t

  val std :
    _ t ->
    unbiased:bool ->
    _ t

  val std1 :
    _ t ->
    dim:int list ->
    unbiased:bool ->
    keepdim:bool ->
    _ t

  val std_out :
    out:_ t ->
    _ t ->
    dim:int list ->
    unbiased:bool ->
    keepdim:bool ->
    _ t

  val stft :
    _ t ->
    n_fft:int ->
    hop_length:int ->
    win_length:int ->
    window:_ t option ->
    normalized:bool ->
    onesided:bool ->
    _ t

  val sub :
    _ t ->
    _ t ->
    _ t

  val sub1 :
    _ t ->
    'a scalar ->
    _ t

  val sub_ :
    _ t ->
    _ t ->
    _ t

  val sub_1 :
    _ t ->
    'a scalar ->
    _ t

  val sub_out :
    out:_ t ->
    _ t ->
    _ t ->
    _ t

  val sum :
    _ t ->
    _ t

  val sum1 :
    _ t ->
    dtype:Kind.packed ->
    _ t

  val sum2 :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val sum3 :
    _ t ->
    dim:int list ->
    dtype:Kind.packed ->
    _ t

  val sum4 :
    _ t ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val sum_out :
    out:_ t ->
    _ t ->
    dim:int list ->
    keepdim:bool ->
    _ t

  val sum_out1 :
    out:_ t ->
    _ t ->
    dim:int list ->
    dtype:Kind.packed ->
    _ t

  val sum_out2 :
    out:_ t ->
    _ t ->
    dim:int list ->
    keepdim:bool ->
    dtype:Kind.packed ->
    _ t

  val sum_to_size :
    _ t ->
    size:int list ->
    _ t

  val svd :
    _ t ->
    some:bool ->
    compute_uv:bool ->
    _ t * _ t * _ t

  val svd_out :
    u:_ t ->
    s:_ t ->
    v:_ t ->
    _ t ->
    some:bool ->
    compute_uv:bool ->
    _ t * _ t * _ t

  val symeig :
    _ t ->
    eigenvectors:bool ->
    upper:bool ->
    _ t * _ t

  val symeig_out :
    e:_ t ->
    v:_ t ->
    _ t ->
    eigenvectors:bool ->
    upper:bool ->
    _ t * _ t

  val tr :
    _ t ->
    _ t

  val t_ :
    _ t ->
    _ t

  val take :
    _ t ->
    index:_ t ->
    _ t

  val take_out :
    out:_ t ->
    _ t ->
    index:_ t ->
    _ t

  val tan :
    _ t ->
    _ t

  val tan_ :
    _ t ->
    _ t

  val tan_out :
    out:_ t ->
    _ t ->
    _ t

  val tanh :
    _ t ->
    _ t

  val tanh_ :
    _ t ->
    _ t

  val tanh_backward :
    grad_output:_ t ->
    output:_ t ->
    _ t

  val tanh_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output:_ t ->
    _ t

  val tanh_out :
    out:_ t ->
    _ t ->
    _ t

  val tensordot :
    _ t ->
    _ t ->
    dims_self:int list ->
    dims_other:int list ->
    _ t

  val threshold :
    _ t ->
    threshold:'a scalar ->
    value:'a scalar ->
    _ t

  val threshold_ :
    _ t ->
    threshold:'a scalar ->
    value:'a scalar ->
    _ t

  val threshold_backward :
    grad_output:_ t ->
    _ t ->
    threshold:'a scalar ->
    _ t

  val threshold_out :
    out:_ t ->
    _ t ->
    threshold:'a scalar ->
    value:'a scalar ->
    _ t

  val to_ :
    _ t ->
    device:Device.t ->
    _ t

  val to1 :
    _ t ->
    options:Kind.packed * Device.t ->
    non_blocking:bool ->
    copy:bool ->
    _ t

  val to2 :
    _ t ->
    dtype:Kind.packed ->
    non_blocking:bool ->
    copy:bool ->
    _ t

  val to3 :
    _ t ->
    _ t ->
    non_blocking:bool ->
    copy:bool ->
    _ t

  val to4 :
    _ t ->
    device:Device.t ->
    dtype:Kind.packed ->
    non_blocking:bool ->
    copy:bool ->
    _ t

  val to_dense :
    _ t ->
    _ t

  val to_dense_backward :
    grad:_ t ->
    _ t ->
    _ t

  val to_mkldnn :
    _ t ->
    _ t

  val to_mkldnn_backward :
    grad:_ t ->
    _ t ->
    _ t

  val to_sparse :
    _ t ->
    _ t

  val to_sparse1 :
    _ t ->
    sparse_dim:int ->
    _ t

  val topk :
    _ t ->
    k:int ->
    dim:int ->
    largest:bool ->
    sorted:bool ->
    _ t * _ t

  val topk_out :
    values:_ t ->
    indices:_ t ->
    _ t ->
    k:int ->
    dim:int ->
    largest:bool ->
    sorted:bool ->
    _ t * _ t

  val totype :
    _ t ->
    scalar_type:Kind.packed ->
    _ t

  val trace :
    _ t ->
    _ t

  val transpose :
    _ t ->
    dim0:int ->
    dim1:int ->
    _ t

  val transpose_ :
    _ t ->
    dim0:int ->
    dim1:int ->
    _ t

  val triangular_solve :
    _ t ->
    a:_ t ->
    upper:bool ->
    transpose:bool ->
    unitriangular:bool ->
    _ t * _ t

  val triangular_solve_out :
    x:_ t ->
    m:_ t ->
    _ t ->
    a:_ t ->
    upper:bool ->
    transpose:bool ->
    unitriangular:bool ->
    _ t * _ t

  val tril :
    _ t ->
    diagonal:int ->
    _ t

  val tril_ :
    _ t ->
    diagonal:int ->
    _ t

  val tril_indices :
    row:int ->
    col:int ->
    offset:int ->
    options:Kind.packed * Device.t ->
    _ t

  val tril_out :
    out:_ t ->
    _ t ->
    diagonal:int ->
    _ t

  val triplet_margin_loss :
    anchor:_ t ->
    positive:_ t ->
    negative:_ t ->
    margin:float ->
    p:float ->
    eps:float ->
    swap:bool ->
    reduction:Reduction.t ->
    _ t

  val triu :
    _ t ->
    diagonal:int ->
    _ t

  val triu_ :
    _ t ->
    diagonal:int ->
    _ t

  val triu_indices :
    row:int ->
    col:int ->
    offset:int ->
    options:Kind.packed * Device.t ->
    _ t

  val triu_out :
    out:_ t ->
    _ t ->
    diagonal:int ->
    _ t

  val trunc :
    _ t ->
    _ t

  val trunc_ :
    _ t ->
    _ t

  val trunc_out :
    out:_ t ->
    _ t ->
    _ t

  val type_as :
    _ t ->
    _ t ->
    _ t

  val unbind :
    _ t ->
    dim:int ->
    _ t list

  val unfold :
    _ t ->
    dimension:int ->
    size:int ->
    step:int ->
    _ t

  val uniform_ :
    _ t ->
    from:float ->
    to_:float ->
    _ t

  val unique_consecutive :
    _ t ->
    return_inverse:bool ->
    return_counts:bool ->
    dim:int ->
    _ t * _ t * _ t

  val unique_dim :
    _ t ->
    dim:int ->
    sorted:bool ->
    return_inverse:bool ->
    return_counts:bool ->
    _ t * _ t * _ t

  val unique_dim_consecutive :
    _ t ->
    dim:int ->
    return_inverse:bool ->
    return_counts:bool ->
    _ t * _ t * _ t

  val unsqueeze :
    _ t ->
    dim:int ->
    _ t

  val unsqueeze_ :
    _ t ->
    dim:int ->
    _ t

  val upsample_bicubic2d :
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_bicubic2d_backward :
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_bicubic2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_bicubic2d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_bilinear2d :
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_bilinear2d_backward :
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_bilinear2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_bilinear2d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_linear1d :
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_linear1d_backward :
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_linear1d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_linear1d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_nearest1d :
    _ t ->
    output_size:int list ->
    _ t

  val upsample_nearest1d_backward :
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    _ t

  val upsample_nearest1d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    _ t

  val upsample_nearest1d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    _ t

  val upsample_nearest2d :
    _ t ->
    output_size:int list ->
    _ t

  val upsample_nearest2d_backward :
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    _ t

  val upsample_nearest2d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    _ t

  val upsample_nearest2d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    _ t

  val upsample_nearest3d :
    _ t ->
    output_size:int list ->
    _ t

  val upsample_nearest3d_backward :
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    _ t

  val upsample_nearest3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    _ t

  val upsample_nearest3d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    _ t

  val upsample_trilinear3d :
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_trilinear3d_backward :
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_trilinear3d_backward_out :
    grad_input:_ t ->
    grad_output:_ t ->
    output_size:int list ->
    input_size:int list ->
    align_corners:bool ->
    _ t

  val upsample_trilinear3d_out :
    out:_ t ->
    _ t ->
    output_size:int list ->
    align_corners:bool ->
    _ t

  val values :
    _ t ->
    _ t

  val var :
    _ t ->
    unbiased:bool ->
    _ t

  val var1 :
    _ t ->
    dim:int list ->
    unbiased:bool ->
    keepdim:bool ->
    _ t

  val var_out :
    out:_ t ->
    _ t ->
    dim:int list ->
    unbiased:bool ->
    keepdim:bool ->
    _ t

  val view :
    _ t ->
    size:int list ->
    _ t

  val view_as :
    _ t ->
    _ t ->
    _ t

  val where :
    condition:_ t ->
    _ t ->
    _ t ->
    _ t

  val zero_ :
    _ t ->
    _ t

  val zeros :
    size:int list ->
    options:Kind.packed * Device.t ->
    _ t

  val zeros_like :
    _ t ->
    _ t

  val zeros_like1 :
    _ t ->
    options:Kind.packed * Device.t ->
    _ t

  val zeros_out :
    out:_ t ->
    size:int list ->
    _ t

end
